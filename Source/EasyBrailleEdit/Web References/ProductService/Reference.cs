//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EasyBrailleEdit.ProductService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseManagerSoap", Namespace="http://tempuri.org/")]
    public partial class LicenseManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetClientIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserRegOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterUserExOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptRegDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteAutoUpdateLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestEmailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenseManager() {
            this.Url = "http://innoobject.dyndns.org/ProductService/LicenseManager.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetClientIPCompletedEventHandler GetClientIPCompleted;
        
        /// <remarks/>
        public event ValidateUserRegCompletedEventHandler ValidateUserRegCompleted;
        
        /// <remarks/>
        public event RegisterUserCompletedEventHandler RegisterUserCompleted;
        
        /// <remarks/>
        public event RegisterUserExCompletedEventHandler RegisterUserExCompleted;
        
        /// <remarks/>
        public event DecryptRegDataCompletedEventHandler DecryptRegDataCompleted;
        
        /// <remarks/>
        public event WriteAutoUpdateLogCompletedEventHandler WriteAutoUpdateLogCompleted;
        
        /// <remarks/>
        public event TestEmailCompletedEventHandler TestEmailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientIP() {
            object[] results = this.Invoke("GetClientIP", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIPAsync() {
            this.GetClientIPAsync(null);
        }
        
        /// <remarks/>
        public void GetClientIPAsync(object userState) {
            if ((this.GetClientIPOperationCompleted == null)) {
                this.GetClientIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIPOperationCompleted);
            }
            this.InvokeAsync("GetClientIP", new object[0], this.GetClientIPOperationCompleted, userState);
        }
        
        private void OnGetClientIPOperationCompleted(object arg) {
            if ((this.GetClientIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIPCompleted(this, new GetClientIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateUserReg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUserReg(string userRegDataStr) {
            object[] results = this.Invoke("ValidateUserReg", new object[] {
                        userRegDataStr});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserRegAsync(string userRegDataStr) {
            this.ValidateUserRegAsync(userRegDataStr, null);
        }
        
        /// <remarks/>
        public void ValidateUserRegAsync(string userRegDataStr, object userState) {
            if ((this.ValidateUserRegOperationCompleted == null)) {
                this.ValidateUserRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserRegOperationCompleted);
            }
            this.InvokeAsync("ValidateUserReg", new object[] {
                        userRegDataStr}, this.ValidateUserRegOperationCompleted, userState);
        }
        
        private void OnValidateUserRegOperationCompleted(object arg) {
            if ((this.ValidateUserRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserRegCompleted(this, new ValidateUserRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterUser(string productId, string licenseKey, string customerName, string tel, string address) {
            object[] results = this.Invoke("RegisterUser", new object[] {
                        productId,
                        licenseKey,
                        customerName,
                        tel,
                        address});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterUserAsync(string productId, string licenseKey, string customerName, string tel, string address) {
            this.RegisterUserAsync(productId, licenseKey, customerName, tel, address, null);
        }
        
        /// <remarks/>
        public void RegisterUserAsync(string productId, string licenseKey, string customerName, string tel, string address, object userState) {
            if ((this.RegisterUserOperationCompleted == null)) {
                this.RegisterUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterUserOperationCompleted);
            }
            this.InvokeAsync("RegisterUser", new object[] {
                        productId,
                        licenseKey,
                        customerName,
                        tel,
                        address}, this.RegisterUserOperationCompleted, userState);
        }
        
        private void OnRegisterUserOperationCompleted(object arg) {
            if ((this.RegisterUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterUserEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterUserEx(string productId, string licenseKey, string customerName, string contactName, string email, string tel, string address) {
            object[] results = this.Invoke("RegisterUserEx", new object[] {
                        productId,
                        licenseKey,
                        customerName,
                        contactName,
                        email,
                        tel,
                        address});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterUserExAsync(string productId, string licenseKey, string customerName, string contactName, string email, string tel, string address) {
            this.RegisterUserExAsync(productId, licenseKey, customerName, contactName, email, tel, address, null);
        }
        
        /// <remarks/>
        public void RegisterUserExAsync(string productId, string licenseKey, string customerName, string contactName, string email, string tel, string address, object userState) {
            if ((this.RegisterUserExOperationCompleted == null)) {
                this.RegisterUserExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterUserExOperationCompleted);
            }
            this.InvokeAsync("RegisterUserEx", new object[] {
                        productId,
                        licenseKey,
                        customerName,
                        contactName,
                        email,
                        tel,
                        address}, this.RegisterUserExOperationCompleted, userState);
        }
        
        private void OnRegisterUserExOperationCompleted(object arg) {
            if ((this.RegisterUserExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterUserExCompleted(this, new RegisterUserExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecryptRegData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptRegData(string regText) {
            object[] results = this.Invoke("DecryptRegData", new object[] {
                        regText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptRegDataAsync(string regText) {
            this.DecryptRegDataAsync(regText, null);
        }
        
        /// <remarks/>
        public void DecryptRegDataAsync(string regText, object userState) {
            if ((this.DecryptRegDataOperationCompleted == null)) {
                this.DecryptRegDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptRegDataOperationCompleted);
            }
            this.InvokeAsync("DecryptRegData", new object[] {
                        regText}, this.DecryptRegDataOperationCompleted, userState);
        }
        
        private void OnDecryptRegDataOperationCompleted(object arg) {
            if ((this.DecryptRegDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptRegDataCompleted(this, new DecryptRegDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteAutoUpdateLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteAutoUpdateLog(string userName, string productName, string licenseKey, string productVersion, string fileVersion) {
            this.Invoke("WriteAutoUpdateLog", new object[] {
                        userName,
                        productName,
                        licenseKey,
                        productVersion,
                        fileVersion});
        }
        
        /// <remarks/>
        public void WriteAutoUpdateLogAsync(string userName, string productName, string licenseKey, string productVersion, string fileVersion) {
            this.WriteAutoUpdateLogAsync(userName, productName, licenseKey, productVersion, fileVersion, null);
        }
        
        /// <remarks/>
        public void WriteAutoUpdateLogAsync(string userName, string productName, string licenseKey, string productVersion, string fileVersion, object userState) {
            if ((this.WriteAutoUpdateLogOperationCompleted == null)) {
                this.WriteAutoUpdateLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteAutoUpdateLogOperationCompleted);
            }
            this.InvokeAsync("WriteAutoUpdateLog", new object[] {
                        userName,
                        productName,
                        licenseKey,
                        productVersion,
                        fileVersion}, this.WriteAutoUpdateLogOperationCompleted, userState);
        }
        
        private void OnWriteAutoUpdateLogOperationCompleted(object arg) {
            if ((this.WriteAutoUpdateLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteAutoUpdateLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestEmail() {
            object[] results = this.Invoke("TestEmail", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestEmailAsync() {
            this.TestEmailAsync(null);
        }
        
        /// <remarks/>
        public void TestEmailAsync(object userState) {
            if ((this.TestEmailOperationCompleted == null)) {
                this.TestEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestEmailOperationCompleted);
            }
            this.InvokeAsync("TestEmail", new object[0], this.TestEmailOperationCompleted, userState);
        }
        
        private void OnTestEmailOperationCompleted(object arg) {
            if ((this.TestEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestEmailCompleted(this, new TestEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetClientIPCompletedEventHandler(object sender, GetClientIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ValidateUserRegCompletedEventHandler(object sender, ValidateUserRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void RegisterUserCompletedEventHandler(object sender, RegisterUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void RegisterUserExCompletedEventHandler(object sender, RegisterUserExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterUserExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterUserExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DecryptRegDataCompletedEventHandler(object sender, DecryptRegDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptRegDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptRegDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void WriteAutoUpdateLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TestEmailCompletedEventHandler(object sender, TestEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591