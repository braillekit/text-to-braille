原書頁碼的處理


明眼字表示法：

  使用 <P> 標籤，例如：
  
    <P>2</P>

  此例代表原書第 2 頁。
  

點字表示法：

  用 36 個 '_' 符號（36 點）當作明顯弟的分隔線，後面再接原書頁碼，例如：
  ____________________________________#2
    
程式處理要點：

在轉換成點字的過程中，若碰到 <P> 標籤，則自動轉換成 36 個 '_' 符號。

由於頁尾也要顯示原書頁碼，因此程式在列印時，必須記住目前列印的頁包含哪些原書頁碼。
舉例來說，原書頁碼的第 2 頁在實際列印時可能是從實體的第 3 頁跨到第 4 頁，而且在第 4 頁的中間某處開始原書頁碼的第 3 頁。那麼，在第 4 頁的頁尾，其原書頁碼就必須標示為 "2-3"。

也就是說，程式在列印時，必須記住目前這頁的起始原書頁碼 (S)，以及終止原書頁碼 (E)。等到列印頁尾時，才將 S 和 E 一併輸出。
若 S == E，則輸出時只輸出 S 即可，唯有當 E > S 時，才輸出 "S-E"。

注意有兩個特例：

  1. 如果某頁的第一列就是原書頁碼，例如 <P>4</P>，那麼該頁的起始原書頁碼就是第 4 頁，而不是上一頁的終止原書頁碼。
  2. 如果某頁的最後一列是原書頁碼，那麼該頁的終止原書頁碼不應該將此原書頁碼算在內，而應將它算在下一頁的起始原書頁碼。
  
第 1 個特例一定要實作，但第 2 個特例更為特殊，沒有實作也不要緊。


變數：

  S: 起始原書頁碼
  E: 終止原書頁碼
  
初始化：

  S = -1;
  E = -1;

每一次列印一頁時：

  1. 把上一頁的終止原書頁碼指定給本頁的起始原書頁碼。
    if (E >= 0) then
      S = E
  2. 迴圈：列印 24 列
    2.1 如果目前這列是原書頁碼，則取出原書頁碼，並指定給變數 N，然後設定 S 和 E，規則為：
        if (S == E) then
          S = N
        else
          E = N
  3. 列印頁尾
    3.1 若 S == -1，表示沒有指定任何原書頁碼，不輸出。
    3.2 若 S != -1 且 E == -1，表示只有指定一次原書頁碼，輸出 S。
    3.3 若 S != -1 且 E != -1
      3.3.1 若 S == E 則輸出 S，
            否則輸出 S-E。
  
